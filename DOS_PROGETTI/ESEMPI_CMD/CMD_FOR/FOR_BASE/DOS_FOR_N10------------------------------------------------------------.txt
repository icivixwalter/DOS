https://ss64.com/nt/for_cmd.html



FOR /F
Loop command: against the results of another command.
Comando loop: contro i risultati di un altro comando.

Syntax
      FOR /F ["options"] %%parameter IN ('command_to_process') DO command

Key
   options:
------------------------------------------------------------------------------------------------------
	delims=xxx   The delimiter character(s)
                   (default = a space)

				   I caratteri delimitatori
                   (impostazione predefinita = uno spazio)
------------------------------------------------------------------------------------------------------
	skip=n       A number of lines to skip at the beginning.
                   (default = 0)

                   Un numero di righe da saltare all'inizio.
                   (impostazione predefinita = 0)

------------------------------------------------------------------------------------------------------
      eol=;        Character at the start of each line to indicate a comment
                   The default is a semicolon ;
                   Carattere all'inizio di ogni riga per indicare un commento
                   L'impostazione predefinita è un punto e virgola;
------------------------------------------------------------------------------------------------------
      tokens=n     The numbered items to  read from each line
                   (default = 1)
                   Gli elementi numerati da leggere da ciascuna riga
                   (impostazione predefinita = 1)
------------------------------------------------------------------------------------------------------
      usebackq     Use the alternate quoting style:
                   - Use double quotes for long file names in "filenameset".
                   - Use single quotes for 'Text string to process'
                   - Use back quotes for `command_to_process`

					Usa lo stile di quotazione alternativo:
					- Usa virgolette doppie per nomi di file lunghi in "filenameset".
					- Usa virgolette singole per "Stringa di testo da elaborare"
					- Usa le virgolette per `command_to_process`
------------------------------------------------------------------------------------------------------
  command_to_process : The output of the 'command_to_process' is
                        passed into the FOR parameter.
                        L'output di "command_to_process" è
                        passato nel parametro FOR.
------------------------------------------------------------------------------------------------------

   command    :   The command to carry out, including any parameters.
                  This can be a single command, or if you enclose it
                  in (brackets), several commands, one per line.
                  Il comando da eseguire, inclusi eventuali parametri.

				Questo può essere un singolo comando o se lo racchiudi
				tra parentesi quadre, diversi comandi, uno per riga.
------------------------------------------------------------------------------------------------------
  %%parameter :  A replaceable parameter:
                 in a batch file use %%G (on the command line %G)

------------------------------------------------------------------------------------------------------

FOR /F
	processing of a command consists of reading the output from the command one line at a time
	and then breaking the line up into individual items of data or 'tokens'.
	The DO command is then executed with the parameter(s) set to the token(s) found.

l'elaborazione di un comando consiste nella lettura dell'output dal comando una riga alla volta
e quindi suddividere l'allineamento in singoli elementi di dati o "token".
Il comando DO viene quindi eseguito con i parametri impostati sul token trovato.

------------------------------------------------------------------------------------------------------


The FOR command is the answer to innumerable questions where you want to take the output of some command,
store it in a variable (%%G) then do something with the result.

Il comando FOR è la risposta a innumerevoli domande in cui si desidera prendere l'output di alcuni comandi,
archiviarlo in una variabile (%% G) quindi fare qualcosa con il risultato.

------------------------------------------------------------------------------------------------------


For example the PING command returns serveral lines including one like:

Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),

To select that one line of output, you can search for the text "loss" (which is always present), then use the Tokens parameter to select the number of lost packets, here this is 0 but it will vary each time you run the command.

set _ping_cmd=ping -n 5 127.0.0.1

FOR /f "tokens=4 delims=(=" %%G IN ('%_ping_cmd% ^|find "loss"') DO echo Result is [%%G]

The tricky part is always splitting up the line of interest into the right tokens, in this case I'm splitting on the characters '=' and '('
these two characters split the line into 5 chunks of text and we pull out the fourth one with "tokens=4"

By default, /F breaks up the command output at each blank space, and any blank lines are skipped.
You can override this default parsing behavior by specifying the "options" parameter. The options must be contained within "quotes"

It is possible to use the syntax on this page to parse a text file with TYPE ('Type somefile.txt') but you will get much better performance using FOR /F File contents (somefile.txt) as that will save loading TYPE.EXE.

The precedence/priority of FOR command options is: usebackq > skip > delims > eol > tokens

usebackq
This option is useful when dealing with a command that already contains one or more straight quotes.
The backquote character ` is just below the ESC key on most keyboards. See the FOR /F page for other effects of usebackq.

Usebackq can be abbreviated to useback (undocumented.)

Skip
SKIP will skip processing a number of lines from the beginning of the file.
SKIP includes empty lines, but after the SKIP is complete, FOR /F ignores (does not iterate) empty lines.

eol
The default end-of-line character is a semicolon ';' when the FOR command reads a text file (or even a character string), any line that STARTS with the eol character will be ignored. In other words it is treated as a comment.
Use eol=X to change the eol character to X.

Often you will want to turn this feature off so that every line of your data file is processed, in theory "eol=" should turn this feature off, but in practice this fails to work correctly - it will set eol to whatever the next character is, often the quote or space character. One workaround is to set eol to some unusual character that you don’t expect to ever encounter in the data file e.g. "eol=€" or "eol=¬". Another method is to escape every delimiter For /f tokens^=*^ delims^=^ eol^= %%a in (file.txt) do... (see forum for a discussion of this)

Delims
More than one delimiter can be specified so a string like 'abcd+efg+hijk;lmno;pqr' can be broken up using "delims=;+".

You can use any character as a delimiter, but they are case sensitive.
If you don’t specify delims it will default to "delims=<tab><space>"

n.b. some text editors will enter the TAB character as a series of spaces, specifying more than one delimiter has been known to cause problems with some data sets.

Tokens
tokens=2,4,6 will cause the second, fourth and sixth items on each line to be processed

tokens=2-6 will cause the second, third, fourth, fifth and sixth items on each line to be processed

tokens=* will cause all items on each line to be processed

tokens=3* will process the third token and the 4th + all subsequent items, this can also be written as tokens=3,*

Each token specified will cause a corresponding parameter letter to be allocated. The letters used for tokens are case sensitive.

If the last character in the tokens= string is an asterisk, then additional parameters are allocated for all the remaining text on the line.

The following ASCII characters can be used as FOR tokens:
ASCII 63 - 93 inclusive, 31 tokens: ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ]
ASCII 95-123 inclusive, 29 tokens: _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z {
(there are a few other characters that can be used, but require escaping)

A single FOR /F command can never parse more than 31 tokens, to use more requires a workaround with multiple FOR commands.

The numbers specified in tokens= are automatically sorted, so for example tokens=5,7,1-3 and tokens=1,2,3,5,7 both produce the same result.

Matching the same token more than once (tokens=1,2,1) can give unpredictable results. Token variables can of course be used multiple times: Echo %%G %%H %%G

FOR tokens variables (or parameter names) are global, so in complex scripts which call one FOR statement from within another FOR statement you can refer to both sets of parameters.

command
This can be almost any internal or external command.

A common pattern is to set a variable = some token output to make it available for later processing/display. When doing this be sure to read the section Using variables within a FOR loop on the main FOR page.

Also consider the case where the command fails, the FOR command will trap the error, but the DO clause is never reached - this means the variable will not be changed. This can cause subtle bugs. When using the FOR command in a batch file always use SETLOCAL at the start to localise all variables. Alternatively you can explicitly clear the variable(s) to remove any existing value, just before running the FOR loop.

command_to_process
The command_to_process can be almost any internal or external command, but there are a few commands
that have no effect when are called through FOR /F - SHIFT, SETLOCAL, ENDLOCAL, CALL:Subroutine.
To be clear these can be used as part of command, but not command_to_process

Examples:

To ECHO from the command line, the name of every environment variable.

   FOR /F "delims==" %G IN ('SET') DO @Echo %G
The same command with usebackq:

   FOR /F "usebackq delims==" %G IN (`SET`) DO @Echo %G
To put the Windows Version into an environment variable

   @echo off
   ::parse the VER command
   FOR /F "tokens=4*" %%G IN ('ver') DO SET _version=%%G
   :: show the result
   echo %_version%

//=========================================================================================================//
Elenca tutti i file di testo in una cartella:
List all the text files in a folder:

   FOR /F "tokens=*" %%G IN ('dir /b C:\docs\*.txt') DO echo %%G
The "tokens=*" has been added to match all parts of any long filenames returned by the DIR command.
Il "token = *" è stato aggiunto per corrispondere a tutte le parti di tutti i nomi di file lunghi restituiti dal comando DIR.

//=========================================================================================================//



List all the text files in a folder, including the full path:
Elenca tutti i file di testo in una cartella, incluso il percorso completo:

   FOR /F "tokens=*" %%G IN ('dir/b /s ^"c:\program files\*.txt^"') DO echo %%G
We use DIR /S (even if the folder has no subfolders) to make DIR return the full path to each file.
In the example above the long filename has to be surrounded in "quotes" and those quotes have to be escaped using ^
Usiamo DIR / S (anche se la cartella non ha sottocartelle) per fare in modo che DIR ritorni il percorso completo di ciascun file.
Nell'esempio sopra il nome del file lungo deve essere racchiuso tra "virgolette" e quelle virgolette devono essere sfuggite usando ^

//=========================================================================================================//




Although the above is a trivial example, being able to set a variable equal to each long filename in turn allows much more complex processing to be done.

More examples can be found on the Syntax / Batch Files pages and the other FOR pages below.

FOR does not, by itself, set or clear the Errorlevel.
FOR is an internal command.

“History never repeats itself, Mankind always does” - Voltaire

Related:

Sebbene quanto sopra sia un esempio banale, essere in grado di impostare una variabile uguale a
ciascun nome di file lungo a sua volta consente l'elaborazione molto più complessa.

Altri esempi sono disponibili nelle pagine Sintassi / File batch e nelle altre pagine FOR di seguito.

FOR da solo non imposta o cancella il livello di errore.
FOR è un comando interno.

"La storia non si ripete mai, l'umanità lo fa sempre" - Voltaire

FOR - Summary of FOR Loop commands.
FOR - Loop through a set of files in one folder.
FOR /R - Loop through files (recurse subfolders).
FOR /D - Loop through several folders.
FOR /L - Loop through a range of numbers.
FOR /F - Loop through items in a text file.
SETLOCAL - Control the visibility of variables inside a FOR loop.
FORFILES - Batch process multiple files.
GOTO - Direct a batch program to jump to a labelled line.
IF - Conditionally perform a command.
Powershell: ForEach-Object - Loop for each object in the pipeline.
Equivalent bash command (Linux): for - Expand words, and execute commands














//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//
												FOR
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//


FOR
Conditionally perform a command on several files.
Esegui in modo condizionale un comando su più file.

Syntax
      FOR %%parameter IN (set) DO command

Key
   set         : A set of one or more files, separated by any standard delimiter.
                 enclosed in parenthesis (file1,file2). Wildcards can be used.

   command     : The command to carry out, including any parameters.
                 This can be a single command, or if you enclose it
                 in (brackets), several commands, one per line.

   %%parameter : A replaceable parameter:
                 e.g. in a batch file use %%G
                      (on the command line %G)
Examples

Copy a single file
FOR %%G IN (MyFile.txt) DO copy %%G d:\backups\

Copy a list of several files
FOR %%G IN (Myfile.txt SecondFile.txt) DO copy %%G d:\backups\

FOR %%G IN ("C:\demo files\file1.txt" "C:\demo files\File2.txt") DO copy %%G d:\backups\

The FOR command is mostly used to process files, but you can also process a text string:
FOR %%G IN ("Hello World") DO Echo %%G
This is not really useful being much the same as Echo Hello World

Although wildcards can be used, an alternative method of processing files is to let FOR /F process the output of the command 'DIR /b' This can be useful when you want to use DIR options like sorting.

Errorlevels
The FOR command does not generally set any errorlevels, leaving that to the command being called.
One exception is using a wildcard, if the wildcard does not match any files, then FOR will return %ERRORLEVEL% = 5

FOR does not, by itself, set or clear the Errorlevel.
FOR is an internal command.



//---------------------------------------------------------------------------> ESEMPIO_01

Conditionally perform a command several times.
Eseguire condizionalmente un comando più volte.

 syntax-FOR-Files
       FOR %%parameter IN (set) DO command


       Key
	      set         : A set of one or more files, separated by any standard delimiter.
	                    enclosed in parenthesis (file1,file2). Wildcards can be used.

	                    Un set di uno o più file, separati da qualsiasi delimitatore standard.
						racchiuso tra parentesi (file1, file2). È possibile utilizzare caratteri jolly.

	      command     : The command to carry out, including any parameters.
	                    This can be a single command, or if you enclose it
	                    in (brackets), several commands, one per line.

	                    Il comando da eseguire, inclusi eventuali parametri.
						Questo può essere un singolo comando o se lo racchiudi
						tra parentesi quadre, diversi comandi, uno per riga.

	      %%parameter : A replaceable parameter:
	                    e.g. in a batch file use %%G
	                         (on the command line %G)

						Un parametro sostituibile:
						per esempio. in un file batch usare %% G
						(sulla riga di comando% G)



		ESEMPI:
						Copy a single file = Copia un singolo file
						FOR %%G IN (MyFile.txt) DO copy %%G d:\backups\







//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//
												FOR  *** FINE ***
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//










